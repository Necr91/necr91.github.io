{"version":3,"sources":["actions/index.js","Components/Navigation.js","Components/WeatherData.js","Containers/WeatherDataContainer.js","Components/Header.js","App.js","reducers/index.js","sagas/index.js","index.js"],"names":["LOAD_WEATHER_DATA","LOADING_SUCCES","TOWN_SELECT","loadWeatherData","type","townSelect","id","Navigation","_ref","dispatch","react_default","a","createElement","Grid","columns","centered","Column","textAlign","List","selection","size","horizontal","Icon","name","Item","Content","Header","onClick","e","target","as","Link","to","connect","WeatherData","data","loading","Container","Loader","active","inline","text","Segment","raised","color","weather","map","item","index","key","description","main","temp","pressure","wind","speed","WeatherDataContainer","state","Components_Header","icon","circular","App","react_router","exact","path","component","initialState","fetchWeatherData","select","endpoint","response","regenerator_default","wrap","_context","prev","next","take","sent","concat","call","fetch","json","put","stop","_marked","_context2","takeEvery","_marked2","sagaMiddleware","createSagaMiddleware","store","createStore","arguments","length","undefined","actions","Object","objectSpread","applyMiddleware","run","ReactDOM","render","es","react_router_dom","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.615a2cd8.chunk.js","sourcesContent":["export const LOAD_WEATHER_DATA = 'LOAD_WEATHER_DATA';\r\nexport const LOADING_SUCCES = 'LOADING_SUCCES';\r\nexport const TOWN_SELECT = 'TOWN_SELECT';\r\n\r\nexport function loadWeatherData() {\r\n    return {\r\n        type: LOAD_WEATHER_DATA\r\n    };\r\n}\r\n\r\nexport function townSelect(id) {\r\n    return {\r\n        type: TOWN_SELECT,\r\n        id\r\n    };\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Grid, List, Icon } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { townSelect, loadWeatherData } from '../actions/index';\r\n\r\nlet Navigation = ({ dispatch }) => {\r\n    return (\r\n        <Grid columns={5} centered>\r\n        <Grid.Column textAlign='center'>\r\n            <List selection size='massive' horizontal>\r\n                <Icon name='marker'/>\r\n                <List.Item>            \r\n                    <List.Content>\r\n                        <List.Header onClick={e => {\r\n                            dispatch(townSelect(e.target.id));\r\n                            dispatch(loadWeatherData());\r\n                        }}\r\n                        id='5128638'\r\n                        as={Link} to='/1'>\r\n                        New York\r\n                        </List.Header>\r\n                    </List.Content>\r\n                </List.Item>     \r\n            </List>          \r\n        </Grid.Column>\r\n        <Grid.Column textAlign='center'>\r\n            <List selection size='massive' horizontal>\r\n                <Icon name='marker'/>\r\n                <List.Item>            \r\n                    <List.Content>\r\n                        <List.Header onClick={e => {\r\n                            dispatch(townSelect(e.target.id));\r\n                            dispatch(loadWeatherData());\r\n                        }}\r\n                        id='524901'\r\n                        as={Link} to='/2'>\r\n                        Moscow\r\n                        </List.Header>\r\n                    </List.Content>\r\n                </List.Item>     \r\n            </List>        \r\n        </Grid.Column>\r\n        <Grid.Column textAlign='center'>\r\n            <List selection size='massive' horizontal>\r\n                <Icon name='marker'/>\r\n                <List.Item>            \r\n                    <List.Content>\r\n                        <List.Header onClick={e => {\r\n                            dispatch(townSelect(e.target.id));\r\n                            dispatch(loadWeatherData());\r\n                        }}\r\n                        id='1850147'\r\n                        as={Link} to='/3'>\r\n                        Tokyo\r\n                        </List.Header>\r\n                    </List.Content>\r\n                </List.Item>     \r\n            </List>          \r\n        </Grid.Column>\r\n    </Grid>\r\n\r\n    )\r\n}\r\n\r\nNavigation = connect()(Navigation);\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { List, Loader, Container, Segment } from 'semantic-ui-react';\r\n\r\nconst WeatherData = ({data, loading}) => {\r\n    return (\r\n        loading\r\n        ?   <Container textAlign='center'>\r\n                <Loader size='massive' active inline />\r\n            </Container>\r\n        :\r\n            <Container text >\r\n                <Segment raised textAlign='center' color='black'>\r\n                    <List size='massive'>\r\n                        {data.weather.map((item, index) => (\r\n                            <List.Item key={index}>Погода: {item.description}</List.Item>\r\n                        ))}\r\n                        <List.Item>Температура: {data.main.temp} &deg;C</List.Item>\r\n                        <List.Item>Давление воздуха: {data.main.pressure} мм рт. ст.</List.Item>\r\n                        <List.Item>Скорость ветра: {data.wind.speed} м/с</List.Item>                        \r\n                    </List>\r\n                </Segment>\r\n            </Container>\r\n    )\r\n}\r\n\r\nexport default WeatherData;","import { connect } from 'react-redux';\r\nimport WeatherData from '../Components/WeatherData';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        data: state.data,\r\n        loading: state.loading\r\n    };\r\n};\r\n\r\nconst WeatherDataContainer = connect(mapStateToProps)(WeatherData);\r\n\r\nexport default WeatherDataContainer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Header, Icon} from 'semantic-ui-react';\r\n\r\nexport default () => (    \r\n    <Header as='h1' icon  textAlign='center'>\r\n        <Icon name='building' circular/>\r\n        <Header.Content as={Link} to='/'>WEATHER IN TOWNS</Header.Content>\r\n    </Header>\r\n)","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Navigation from './Components/Navigation'\nimport WeatherDataContainer from './Containers/WeatherDataContainer';\nimport Header from './Components/Header';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Route exact path='/' component={Navigation}/>\n      <Route exact path='/1' component={WeatherDataContainer} />\n      <Route exact path='/2' component={WeatherDataContainer} />\n      <Route exact path='/3' component={WeatherDataContainer} />\n    </div>\n  );\n}\n\nexport default App;","import { LOADING_SUCCES, LOAD_WEATHER_DATA } from '../actions/index';\r\n\r\nconst initialState = {\r\n    data: {},\r\n    loading: false\r\n};\r\n\r\nexport default function weatherApp(state = initialState, actions) {\r\n    switch (actions.type) {\r\n        case LOAD_WEATHER_DATA:\r\n            return {\r\n                loading: true\r\n            }\r\n        case LOADING_SUCCES:\r\n            return {\r\n                ...state,\r\n                data: actions.data,\r\n                loading: actions.loading\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { call, put, take, takeEvery } from 'redux-saga/effects';\r\nimport { LOADING_SUCCES, LOAD_WEATHER_DATA} from '../actions/index';\r\n\r\nexport function* fetchWeatherData() {\r\n    const select = yield take('TOWN_SELECT');         \r\n    const endpoint = `http://api.openweathermap.org/data/2.5/weather?id=${select.id}&units=metric&lang=ru&APPID=3ced723032f3df309a5bcd00fdd43279`;\r\n    const response = yield call(fetch, endpoint);\r\n    const data = yield response.json();    \r\n    yield put({ type: LOADING_SUCCES, data, loading: false });\r\n}\r\n\r\nexport default function* loading() {\r\n    yield takeEvery(LOAD_WEATHER_DATA, fetchWeatherData);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\nimport { loadWeatherData } from './actions/index';\nimport weatherApp from './reducers/index';\nimport loading from './sagas/index';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(weatherApp, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(loading);\n\nstore.dispatch(loadWeatherData());\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}